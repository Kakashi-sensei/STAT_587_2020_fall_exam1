por1<- c(15, 18, 10, 12, 7, 13, 9)
summary(por1)
library(psych)
describe(por1)
por2<- c(7, 19, 13, 16, 21, 10, 12, 15)
describe(por1)
describe(pro2)
describe(por2)
t.test(por1,por2,var.equal = TRUE)
q1f<-t.test(por1,por2,var.equal = TRUE)
View(q1f)
t.test(por1,por2,var.equal = TRUE)
t.test(por1,por2)
rm((list))
rm(list=ls())
rat<- read.csv ("https://raw.githubusercontent.com/Kakashi-sensei/STAT_587_2020_fall_exam1/master/Rats.txt", header= TRUE)
View(rat)
t.test(rat$Trim ~ rat$Untrimmed)
t.test(rat$Trim, rat$Untrimmed)
t.test(rat$Trim, rat$Untrimmed,alternative = 'less')
describe(rat$Trim)
library(psych)
describe(rat$Trim)
d1<-describe(rat$Trim)
d2<-describe(rat$Untrimmed)
View(d1)
View(d2)
bartlett.test(rat$Trim,rat$Untrimmed)
bartlett.test(rat$Trim~rat$Untrimmed)
View(rat)
library(reshape2)
ratmelt<-melt(rat,measure.vars = c('Trim','Untrimmed'),#melted variable
variable.name='T/UT')
View(ratmelt)
ratmelt <- data.frame(lapply(ratmelt,function(x) {x <- gsub("Trim","1",x,fixed=TRUE)}))
View(ratmelt)
ratmelt <- data.frame(lapply(ratmelt,function(x) {x <- gsub("Untrimmed","0",x,fixed=TRUE)}))
library(car) #调用程序包car
library(carData) #载入程序包carData
install.packages("car")
install.packages("car")
library(car) #调用程序包car
install.packages("carData")
library(car) #调用程序包car
ratmelt<-melt(rat,measure.vars = c('Trim','Untrimmed'),#melted variable
variable.name='TUT')
rm(list=ls())
#Q2
rat<- read.csv ("https://raw.githubusercontent.com/Kakashi-sensei/STAT_587_2020_fall_exam1/master/Rats.txt", header= TRUE)
library(psych)
library(reshape2)
ratmelt <- data.frame(lapply(ratmelt,function(x) {x <- gsub("Trim","1",x,fixed=TRUE)}))
ratmelt<-melt(rat,measure.vars = c('Trim','Untrimmed'),#melted variable
variable.name='TUT')
ratmelt <- data.frame(lapply(ratmelt,function(x) {x <- gsub("Trim","1",x,fixed=TRUE)}))
ratmelt <- data.frame(lapply(ratmelt,function(x) {x <- gsub("Untrimmed","0",x,fixed=TRUE)}))
library(car)
leveneTest(ratmelt$value,varh$TUT)
typeof(ratmelt$value)
ratmelt<-as.double(ratmelt$value)
ratmelt<-melt(rat,measure.vars = c('Trim','Untrimmed'),#melted variable
variable.name='TUT')
View(ratmelt)
ratmelt <- data.frame(lapply(ratmelt,function(x) {x <- gsub("Trim","1",x,fixed=TRUE)}))
ratmelt <- data.frame(lapply(ratmelt,function(x) {x <- gsub("Untrimmed","0",x,fixed=TRUE)}))
as.double(ratmelt$value)
typeof(ratmelt$value)
leveneTest(ratmelt$value,varh$TUT)
c(ratmelt$value)
leveneTest(ratmelt$value,varh$TUT)
View(ratmelt)
ratmelt<-melt(rat,measure.vars = c('Trim','Untrimmed'),#melted variable
variable.name='TUT')
ratmelt <- sub("Untrimmed","0",ratmelt$TUT)
ratmelt <- sub("Trim","1",ratmelt)
ratmelt<-melt(rat,measure.vars = c('Trim','Untrimmed'),#melted variable
variable.name='TUT')
ratmelt <- sub("Untrimmed","0",ratmelt$TUT)
ratmelt
ratmelt<-melt(rat,measure.vars = c('Trim','Untrimmed'),#melted variable
variable.name='TUT')
a <- sub("Untrimmed","0",ratmelt$TUT)
b <- sub("Trim","1",a)
View(ratmelt)
ratmelt$TUT <-b
leveneTest(ratmelt$value,varh$TUT)
leveneTest(ratmelt$value,ratmelt$TUT)
leveneTest(ratmelt$value,ratmelt$TUT,center = mean)
leveneTest(ratmelt$value,ratmelt$TUT)
t.test(rat$Trim, rat$Untrimmed,alternative = 'less')
t.test(rat$Trim, rat$Untrimmed,var.equal=FALSE,alternative = 'less')
d1<-describe(rat$Trim)
View(d1)
t.test(rat$Trim, rat$Untrimmed,var.equal=TRUE,alternative = 'less')
t.test(rat$Trim, rat$Untrimmed,var.equal=TRUE,conf.level=0.9, alternative = 'less')
t.test(rat$Trim, rat$Untrimmed,var.equal=FALSE,conf.level=0.9, alternative = 'less')
boxplot(value~TAT,data=ratmelt)
boxplot(value~TUT,data=ratmelt)
library(car)
qqPlot(value~TUT, main="qq plot", col="blue", col.lines="red",data=ratmelt)#qq-plot
qqPlot(ratmelt$value, main="qq plot", col="blue", col.lines="red")
shapiro.test(ratmelt$value)
shapiro.test(value~TUT, data=ratmelt)
# Function to generate random permutations and calculate means
randomsamples<-function(y, trt, nsims=199){
n <- tapply(y, trt, length)
y_sims<-NULL
for(i in 1:nsims){
n_new <- sample(1:length(y), n[1])
y_sims <- rbind(y_sims, c(mean(y[n_new]), mean(y[!(1:length(y)) %in% n_new])))
}
y_sims<-as.data.frame(y_sims)
names(y_sims)<-names(n)
return(y_sims)
}
View(ratmelt)
#create a random shuffle of known values
samples <- randomsamples(ratmelt$value, ratmelt$TUT, nsims = 199)
View(samples)
View(ratmelt)
diff_random <- samples$`1`-samples$`0`
diff_random
View(ratmelt)
# p-value
m <- sum(diff_random > -47.9)
n <- lengh(diff_random)
n <- lenghth(diff_random)
n <- length(diff_random)
(m+1)/(n+1)
return(y_sims)
# create a Function to generate random permutations and calculate means
randomsamples<-function(y, trt, nsims=100){
n <- tapply(y, trt, length)
y_sims<-NULL
for(i in 1:nsims){
n_new <- sample(1:length(y), n[1])
y_sims <- rbind(y_sims, c(mean(y[n_new]), mean(y[!(1:length(y)) %in% n_new])))
}
y_sims<-as.data.frame(y_sims)
names(y_sims)<-names(n)
return(y_sims)
}
#create a random shuffle of known values
samples <- randomsamples(ratmelt$value, ratmelt$TUT, nsims = 199)
diff_random <- samples$`1`-samples$`0`
# p-value
m <- sum(diff_random > -47.9)
n <- length(diff_random)
(m+1)/(n+1)
m
n
# p-value
m <- sum(diff_random >= -47.9)
n <- length(diff_random)
(m+1)/(n+1)
# p-value
m <- sum(diff_random <= -47.9)
(m+1)/(n+1)
m
install.packages(c("ade4", "ape", "backports", "BH", "BiocManager", "broom", "callr", "checkmate", "CHNOSZ", "cli", "curl", "data.table", "DBI", "dbplyr", "digest", "ellipsis", "fansi", "forcats", "fs", "ggplot2", "glue", "gtools", "haven", "hms", "htmltools", "httr", "jsonlite", "knitr", "lmtest", "lubridate", "matrixStats", "mime", "modelr", "openssl", "ore", "pillar", "plyr", "prettyunits", "processx", "ps", "purrr", "R6", "RCurl", "reshape2", "rJava", "rmarkdown", "rstudioapi", "rvest", "scales", "segmented", "selectr", "stringi", "sys", "tibble", "tidyr", "tidyverse", "tinytex", "vctrs", "withr", "xfun", "xlsx", "xml2", "yaml"))
updateR()
install.packages("installr")
library(installr)
updateR()
install.packages("installr")
library(installr)
updateR()
